const Test = require("../models/test.model");
const Transformer = require("../models/transformer.model");
const mlClient = require("./ml.client");

async function createTestRecord({
  transformerId,
  fileRecord,
  parsedData,
  testDate,
  uploaderId,
  uploadedFile,
}) {
  const test = new Test({
    transformer: transformerId,
    filename: fileRecord.filename,
    originalName: fileRecord.originalname,
    // Note: files are not stored on disk in memory mode; no uploadPath
    uploadPath: null,
    fileType: fileRecord.mimetype || fileRecord.type,
    testDate: testDate || new Date(),
    // If sending file directly to ML, we don't need to persist rawData; otherwise keep parsedData
    rawData: parsedData || {},
    status: "processing",
  });
  await test.save();
  // send to ML model asynchronously
  const mlPromise = uploadedFile
    ? mlClient.sendFile(uploadedFile, test._id)
    : mlClient.send(parsedData, test._id);

  mlPromise
    .then(async (inference) => {
      test.analysisSummary = inference.summary || {};
      test.status = "completed";
      test.mlRequestId = inference.requestId || null;
      test.mlResponse = inference || {};
      test.processedAt = new Date();
      await test.save();

      // alerts are generated by ML but this deployment does not store alerts in DB
    })
    .catch(async (err) => {
      test.status = "failed";
      test.analysisSummary = { error: err.message };
      test.mlResponse = { error: err.message };
      test.processedAt = new Date();
      await test.save();
    });

  return test;
}

async function listTests(transformerId) {
  return Test.find({ transformer: transformerId })
    .sort({ testDate: -1 })
    .lean();
}

async function getTestDetails(testId) {
  const test = await Test.findById(testId).lean();
  // prepare graph data (placeholder)
  const graphData = {
    points: test.rawData?.points || [],
    meta: test.analysisSummary || {},
  };
  return { test, graphData };
}

module.exports = { createTestRecord, listTests, getTestDetails };
